% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/remote.R
\name{remote}
\alias{remote}
\alias{breedR.qget}
\alias{breedR.qstat}
\alias{breedR.qdel}
\alias{breedR.qnuke}
\alias{summary.breedR.q}
\alias{print.breedR.q}
\alias{breedR.remote_load}
\alias{submit}
\alias{breedR.qdel}
\alias{breedR.qstat}
\alias{breedR.qnuke}
\alias{breedR.remote_load}
\title{Control and view a remote breedR-queue of submitted jobs}
\usage{
breedR.qget(id, remove = TRUE)

breedR.qdel(id)

breedR.qstat(id)

breedR.qnuke()

breedR.remote_load(retry = 5)
}
\arguments{
\item{id}{The job-id which is the output from \code{breedR} when the job is 
submitted,  the job-number or job-name. For \code{breedR.qstat}, \code{id} 
is optional and if omitted all the jobs will be listed.}

\item{remove}{Logical. If FALSE, leave the job on the server after retrieval, 
otherwise remove it (default).}

\item{retry}{numeric. In case of connection failure, number of times to retry
before giving up and returning \code{NA}.}

\item{...}{Other arguments. Not used.}
}
\value{
\code{breedR.qstat} returns an \code{breedR.q}-object with 
  information about current jobs.
}
\description{
Control and view a remote breedR-queue of submitted jobs
}
\details{
\code{breedR.qstat} shows job(s) on the server, \code{breedR.qget} 
  fetches the results (and by default remove the files on the server), 
  \code{breedR.qdel} removes a job on the server and \code{breedR.qnuke} 
  removes all jobs on the server.
  
  Finally, \code{breedR.remote_load} returns the current load in the server, 
  as a percent. This should be used to check whether jobs can be safely 
  submitted, and this is left to the user.
  
  The recommended procedure is to use \code{r <- remlf90(..., 
  breedR.bin="submit")} and then do \code{r <- breedR.qget(r)} at a later 
  stage. If the job is not finished, then \code{r} will not be overwritten 
  and this step can be repeated.  The reason for this procedure, is that some
  information usually stored in the result object does not go through the 
  remote server, hence have to be appended to the results that are retrieved 
  from the server. Hence doing \code{r <- remlf90(..., breedR.bin="submit")} 
  and then later retrieve it using \code{r <- breedR.qget(1)}, say, then 
  \code{r} does not contain all the required information.
}
\section{Remote computing under Windows}{
 You need to install \code{cygwin} 
  and \code{ssh} beforehand.
}

\section{Setup}{
 You need to configure the client and server machines so that 
  passwordless SSH authentication works. See for example 
  \href{http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/}{here}
  
  
  
  
  
  Furthermore, you need to configure breedR by setting the options 
  \code{remote.host}, \code{remote.user}, \code{remote.port} and 
  \code{remote.bin}. You can permanently set these options in the file 
  \code{.breedRrc} in your home directory. See ?\code{breedR.setOption}.
}

\examples{
\dontrun{
r = remlf90(y~1, data = data.frame(y=rnorm(10)), breedR.bin = "submit")
summary(r)       # shows its status, same as breedR.qstat(r)
breedR.qstat()   # shows all jobs
r = breedR.qget(r, remove=FALSE)
breedR.qdel(1)
breedR.qnuke()
summary(r)   # results of the analysis
}
}
\seealso{
\code{\link{remlf90}}
}
